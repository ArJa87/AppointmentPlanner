{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Documents\\\\Code\\\\Proyects\\\\appointment-planner-starting-v18\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [duplicate, setDuplicate] = useState(false);\n  useEffect(() => {\n    for (let i = 0; i < contacts.length; i++) {\n      if (name === contacts[i].name) {\n        setDuplicate(true);\n      }\n    }\n  }, [name, contacts]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n\n    if (duplicate === false) {\n      setName(name);\n      setPhone(phone);\n      setEmail(email);\n      addContact(name, phone, email);\n      //const form = document.getElementById('contactForm');\n      //const submitter = document.querySelector('button[value=submit]');\n      //const formData = new FormData(form, submitter);\n      //addContact(formData.name, formData.phone , formData.email);\n      document.getElementById('contactForm').reset();\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phone,\n        setPhone: setPhone,\n        email: email,\n        setEmail: setEmail,\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        array: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"BYxyrn6t6cgckC7hvAUC646tH1A=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","name","setName","phone","setPhone","email","setEmail","duplicate","setDuplicate","i","length","handleSubmit","e","preventDefault","document","getElementById","reset","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","array","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Documents/Code/Proyects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ( { contacts, addContact}) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [duplicate, setDuplicate] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    for (let i = 0; i < contacts.length; i++) {\r\n      if (name === contacts[i].name) {\r\n        setDuplicate(true);\r\n      }\r\n  }},[name, contacts])\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   \r\n    if (duplicate === false) {\r\n      setName(name);\r\n      setPhone(phone);\r\n      setEmail(email);\r\n      addContact(name, phone, email)\r\n      //const form = document.getElementById('contactForm');\r\n      //const submitter = document.querySelector('button[value=submit]');\r\n      //const formData = new FormData(form, submitter);\r\n      //addContact(formData.name, formData.phone , formData.email);\r\n      document.getElementById('contactForm').reset();\r\n    }\r\n  }; \r\n    \r\n  \r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm \r\n        name={name} setName={setName}\r\n        phone={phone} setPhone={setPhone}\r\n        email={email} setEmail={setEmail}\r\n        onSubmit={handleSubmit} /> \r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList array={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAA8B;EAAAC,EAAA;EAAA,IAA5B;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAAH,IAAA;EACnD;AACF;AACA;AACA;EACE,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,QAAQ,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,IAAIR,IAAI,KAAKF,QAAQ,CAACU,CAAC,CAAC,CAACR,IAAI,EAAE;QAC7BO,YAAY,CAAC,IAAI,CAAC;MACpB;IACJ;EAAC,CAAC,EAAC,CAACP,IAAI,EAAEF,QAAQ,CAAC,CAAC;EAEpB,MAAMY,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;AACJ;AACA;AACA;;IAEI,IAAIN,SAAS,KAAK,KAAK,EAAE;MACvBL,OAAO,CAACD,IAAI,CAAC;MACbG,QAAQ,CAACD,KAAK,CAAC;MACfG,QAAQ,CAACD,KAAK,CAAC;MACfL,UAAU,CAACC,IAAI,EAAEE,KAAK,EAAEE,KAAK,CAAC;MAC9B;MACA;MACA;MACA;MACAS,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACC,KAAK,EAAE;IAChD;EACF,CAAC;;EAID;AACF;AACA;AACA;;EAEE,oBACErB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,gBACEtB,OAAA;QAAAsB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACpB1B,OAAA,CAACH,WAAW;QACZS,IAAI,EAAEA,IAAK;QAACC,OAAO,EAAEA,OAAQ;QAC7BC,KAAK,EAAEA,KAAM;QAACC,QAAQ,EAAEA,QAAS;QACjCC,KAAK,EAAEA,KAAM;QAACC,QAAQ,EAAEA,QAAS;QACjCgB,QAAQ,EAAEX;MAAa;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAClB,eACV1B,OAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACN1B,OAAA;MAAAsB,QAAA,gBACEtB,OAAA;QAAAsB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACjB1B,OAAA,CAACF,QAAQ;QAAC8B,KAAK,EAAExB;MAAS;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACrB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACvB,EAAA,CA7DWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}